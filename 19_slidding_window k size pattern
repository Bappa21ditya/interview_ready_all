indentification:
arr/string
k is given
condtion is needed


format:
while(j<size)
{
calculation
if(j-i+1<k)
{
j++;
}
else if(j-i+1==k)
{
  ans calclation
  fixed i
  i++;
  j++
  }
  }
  return ans;


1.max_subarray_of_size_k
#include <bits/stdc++.h>
using namespace std;
int main()
{
    
 int a[]={1, 4, 2, 10, 23, 3, 1, 0, 20};
 int n=9;
 int i=0,j=0;
 int maxi=0;
 int sum=0;
 int k=4;
 while(j<n)
 {
     sum+=a[j];
     if(j-i+1<k)
     {
         j++;
     }
     else if(j-i+1==k)
     {
       maxi=max(sum,maxi);
       sum-=a[i];
       i++;
       j++;
     }
 }
  cout<<maxi<<endl;

}
First negative integer in every window of size k 
8
12 -1 -7 8  -15 30 16 18
3
-1 -1 -7 -15 -15 0
vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int n, long long int k) {
        
         int j=0;
       list<long long int >q;
        vector<long long int>res;
         int i=0; 
        while(j<n)
        {
            if(A[j]<0)
            {
            q.push_back(A[j]);
            }
           
            if(j-i+1<k)
            {
                j++;
            }
            else if(j-i+1==k)
            {
                if(q.size()==0)
                {
                    res.push_back(0);
                }
                else
                {
                    long long int t=q.front();
                    res.push_back(t);
                    if(A[i]==t)
                    {
                        q.pop_front();
                    }
                }
                i++;
                j++;
              
            
            }
            
        }
                    return res; 
