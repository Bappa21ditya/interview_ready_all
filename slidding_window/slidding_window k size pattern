
indentification:
arr/string
k is given
condtion is needed


format:
while(j<size)
{
calculation
if(j-i+1<k)
{
j++;
}
else if(j-i+1==k)
{
  ans calclation
  fixed i
  i++;
  j++
  }
  }
  return ans;


1.max_subarray_of_size_k
#include <bits/stdc++.h>
using namespace std;
int main()
{
    
 int a[]={1, 4, 2, 10, 23, 3, 1, 0, 20};
 int n=9;
 int i=0,j=0;
 int maxi=0;
 int sum=0;
 int k=4;
 while(j<n)
 {
     sum+=a[j];
     if(j-i+1<k)
     {
         j++;
     }
     else if(j-i+1==k)
     {
       maxi=max(sum,maxi);
       sum-=a[i];
       i++;
       j++;
     }
 }
  cout<<maxi<<endl;

}
First negative integer in every window of size k 
8
12 -1 -7 8  -15 30 16 18
3
-1 -1 -7 -15 -15 0
vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int n, long long int k) {
        
         int j=0;
       list<long long int >q;
        vector<long long int>res;
         int i=0; 
        while(j<n)
        {
            if(A[j]<0)
            {
            q.push_back(A[j]);
            }
           
            if(j-i+1<k)
            {
                j++;
            }
            else if(j-i+1==k)
            {
                if(q.size()==0)
                {
                    res.push_back(0);
                }
                else
                {
                    long long int t=q.front();
                    res.push_back(t);
                    if(A[i]==t)
                    {
                        q.pop_front();
                    }
                }
                i++;
                j++;
              
            
            }
            
        }
                    return res; 


3.Sliding Window Maximum (Maximum of all subarrays of size k)
 vector<int> maxSlidingWindow(vector<int>& A, int B) {
     vector<int> ans;  
     if(A.size()<B){
        ans.push_back(*max_element(A.begin(),A.end()));
        return ans;
    }
    deque<int> Q;
    int i=0,j=0;
    while(j<A.size()){
        while(!Q.empty() && Q.back()<A[j]){
                Q.pop_back();
        }
        Q.push_back(A[j]);
        if(j-i+1 <B){
            j++;
        }
        
        else if(j-i+1 == B){
            ans.push_back(Q.front());
            if(A[i]==Q.front()){
                Q.pop_front();
            }
            i++;
            j++;
        }
    }
    return ans;
        
    }
    1456. Maximum Number of Vowels in a Substring of Given Length
    class Solution {
public:
    int maxVowels(string s, int k) {
        int n=s.size();
        int i=0;
        int j=0;
        int maxi=0;
        int res=0;
        unordered_set<char>set;
        string v="aeiou";
        for(int i=0;i<5;i++)
        {
            set.insert(v[i]);
        }
        while(j<n)
        {
            if(set.find(s[j])!=set.end())
            {
               res++;
            }
            if(j-i+1<k)
            {
                j++;
            }
            else if(j-i+1==k)
            {
                maxi=max(maxi,res);
                if(set.find(s[i])!=set.end())
                {
                    res--;
                }
                i++;
                j++;
            }
        }
        return maxi;
        
    }
};
