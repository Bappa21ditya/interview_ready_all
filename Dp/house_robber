
class Solution {
public:
    int sol(vector<int>& nums ,int n,int t[] )
    {
        if(n<0)
            return 0;
        if(n==1)
            return max(nums[0],nums[1]);
        if(t[n]!=-1)
            return t[n];
        return t[n]= max( sol(nums,n-1,t),nums[n]+sol(nums,n-2,t));
        }
    
    int rob(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        int n=nums.size()-1;
        
        int t[102]; 
        // int t[n]=new int
        //  int *t = new int[n];
        // memset(dp, -1, sizeof(dp));
        memset(t,-1,sizeof(t));
        return sol(nums,n,t);
        
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int rob(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        if(nums.length == 1) return nums[0];
        return getMaxAmount(nums);
    }
    
    
    public int getMaxAmount(int[] nums) {
       int dp[] = new int[nums.length];
       dp[0] = nums[0];
       dp[1] = Integer.max(nums[1], nums[0]); 
       for(int i = 2; i < nums.length; i++) {
           if(dp[i] > 0) return dp[i]; 
            dp[i] = Integer.max(nums[i] + dp[i-2], dp[i-1]);
       }
       return dp[nums.length-1]; 
    }
}
