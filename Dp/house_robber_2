class Solution {
public:
    int sol(vector<int>nums,int i,int j)
    {
       if(j<i)
           return 0;
       return max(nums[j]+sol(nums,i,j-2),sol(nums,i,j-1));  
    }
    int rob(vector<int>& nums) {
        if(nums.size()==0)
              return 0;
        int n=nums.size()-1;
        if(nums.size()==1)
            return nums[0];
        return max(sol(nums,0,n-1),sol(nums,1,n));
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MEMOIZATION
class Solution {
public:
    int dp[102][102];
    int sol(vector<int>nums,int i,int j)
    {
       if(j<i)
           return 0;
       if(nums.size()==2)
             return max(nums[0],nums[1]); 
        if(dp[i][j]!=-1)
            return dp[i][j];
       return dp[i][j]= max(nums[j]+sol(nums,i,j-2),sol(nums,i,j-1));  
    }
    int rob(vector<int>& nums) {
        if(nums.size()==0)
              return 0;
         int n=nums.size()-1;
        if(nums.size()==1)
            return nums[0];
        // if(nums.size()==2)
        //      return max(nums[0],nums[1]);
        memset(dp,-1,sizeof(dp));
        return max(sol(nums,0,n-1),sol(nums,1,n));
    }
};
